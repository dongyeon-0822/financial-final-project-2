plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mustache'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
//    developmentOnly 'org.springframework.boot:spring-boot-devtools'


    // Spring Security
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-test'

    // JWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'

    // OAuth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // swagger
    implementation "io.springfox:springfox-boot-starter:3.0.0"

    //FeignClient(Upbit API 사용)
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:3.1.5'

    //Upbit JWT implementation '
    implementation group: 'com.auth0', name: 'java-jwt', version: '3.16.0'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'


    //email 인증 의존성 추가
    implementation 'org.springframework.boot:spring-boot-starter-mail:2.7.0'

    // Upbit json
    dependencies {
        implementation 'com.google.code.gson:gson:2.8.6'
    }

}


// React 빌드 스크립트
def frontendDir = "$projectDir/src/main/frontend"

sourceSets {
    main {
        resources { srcDirs = ["$projectDir/src/main/resources"]
        }
    }
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact(type: Exec) {
    workingDir "$frontendDir"
    inputs.dir "$frontendDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine 'npm.cmd', 'install' }
    else {
        commandLine "npm", "audit", "fix" 
        commandLine 'npm', 'install'
    }
}

task buildReact(type: Exec) {
    dependsOn "installReact"
    workingDir "$frontendDir"
    inputs.dir "$frontendDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }
}

task copyReactBuildFiles(type: Copy) {
    dependsOn "buildReact"
    from "$frontendDir/build"
    into "$projectDir/src/main/resources/static"
}

// 프로젝트가 만들어지고 배포되는 시점(bootJar) 실행되는 시점에만 React 빌드 파일이 포함
tasks.bootJar {
    dependsOn "copyReactBuildFiles"
}


tasks.named('test') {
    useJUnitPlatform()
}